{"version":3,"sources":["helpers/UsersGraphQL.js","components/nav/UserProfile.js","components/hooks/useProfile.js","components/nav/NavBar.js","pages/HomePage.js","components/tables/Table.js","components/icons/MatIcon.js","helpers/GraphQL.js","components/forms/Input.js","components/forms/Select.js","pages/complaints/NewComplaintRegisterPage.js","components/modals/Modal.js","pages/complaints/AssignComplaintPopup.js","pages/complaints/UpdateComplaintForm.js","pages/ComplaintsPage.js","pages/users/NewUserPage.js","pages/UserManagementPage.js","helpers/AuthHelper.js","pages/LoginPage.js","App.js","conf.js","serviceWorker.js","index.js"],"names":["USERS_GET_TOKEN","gql","USERS_GET_ME","USERS","UserProfile","props","useQuery","loading","error","data","console","log","className","me","username","exact","to","useProfile","history","useHistory","graphQLErrors","length","message","push","NavBar","HomePage","Table","columns","idCol","map","col","key","name","label","row","render","MatIcon","extra","text","COMPLAINTS","GET_COMPLAINT","NATURES","LOCATIONS","REGISTER_COMPLAINT","UPDATE_ASSIGN_COMPLAINT","UPDATE_DETAILS_COMPLAINT","Input","help","type","htmlFor","id","Select","options","value","o","NewComplaintRegisterPage","natures","locations","useState","redirect","setRedirect","Map","formData","setFormData","useMutation","registerComplaint","natureOptions","locationOptions","handleChange","e","target","onSubmit","preventDefault","variables","openDate","refetchQueries","query","then","res","onChange","required","maxLength","Modal","onClose","title","children","posx","posy","onClick","AssignComplaintPopup","complaint","onComplete","users","assignTo","userOptions","r","withRouter","match","params","updateDetails","inputsConf","prev","Object","keys","forEach","details","defaultValue","actionPlan","rca","results","rows","financialImpact","costCenter","responsiblePerson","ComplaintsPage","assign","setAssign","selected","setSelected","assignedTo","status","fmtDate","strDate","parsed","Date","parse","toLocaleDateString","records","complaints","nature_name","nature","location_name","location","path","clientName","NewUserPage","UserManagementPage","firstName","lastName","AuthHelper","saveToken","token","cb","sessionStorage","setItem","getToken","getItem","removeToken","removeItem","LoginPage","login","client","src","alt","clearStore","tokenAuth","ApolloClient","uri","request","operation","setContext","headers","Authorization","App","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3b5d34d0.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\r\nexport const USERS_GET_TOKEN = gql`\r\n  mutation getToken($username: String!, $password: String!) {\r\n    tokenAuth(username: $username, password: $password) {\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport const USERS_GET_ME = gql`\r\n  query getMe {\r\n    me {\r\n      id\r\n      username\r\n    }\r\n  }\r\n`;\r\n\r\nexport const USERS = gql`\r\n  query getUsers {\r\n    users {\r\n      id\r\n      username\r\n      email\r\n      firstName\r\n      lastName\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { USERS_GET_ME } from \"../../helpers/UsersGraphQL\";\r\n\r\nfunction UserProfile(props) {\r\n  let { loading, error, data } = useQuery(USERS_GET_ME);\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n  console.log(data);\r\n  return (\r\n    <div className=\"user-profile-nav\">\r\n      <ul>\r\n        <li>\r\n          <b>{data.me.username}</b>\r\n        </li>\r\n        <li>\r\n          <NavLink exact to=\"/login\">\r\n            Logout\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserProfile;\r\n","import React from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { USERS_GET_ME } from \"../../helpers/UsersGraphQL\";\r\n\r\nfunction useProfile(props) {\r\n  console.log(\"useProfile\");\r\n  const history = useHistory();\r\n  const { loading, error, data } = useQuery(USERS_GET_ME);\r\n  if (loading) return null;\r\n  if (error) {\r\n    console.log(error);\r\n    if (error.graphQLErrors.length) {\r\n      let message = error.graphQLErrors[0].message;\r\n      if (\r\n        message === \"Signature has expired\" ||\r\n        message === \"You do not have permission to perform this action\"\r\n      ) {\r\n        history.push(\"/login\");\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  return data;\r\n}\r\n\r\nexport default useProfile;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport UserProfile from \"./UserProfile\";\r\nimport useProfile from \"../hooks/useProfile\";\r\n\r\nfunction NavBar() {\r\n  useProfile();\r\n  return (\r\n    <header className=\"navbar container\">\r\n      <div className=\"content\">\r\n        <h3>Twiga - CCMS</h3>\r\n        <div className=\"nav-links\">\r\n          <ul>\r\n            <li>\r\n              <NavLink exact to=\"/\">\r\n                Home\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/complaints\">Complaints</NavLink>\r\n            </li>\r\n            {/* <li>\r\n              <NavLink to=\"/users\">Manage Users</NavLink>\r\n            </li> */}\r\n          </ul>\r\n          <UserProfile />\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nfunction HomePage(props) {\r\n  return <div>Home page/dashboard graphs will be here...</div>;\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\n\r\nfunction Table({ columns, data, idCol = \"id\" }) {\r\n  return (\r\n    <div className=\"table-container\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            {columns.map((col) => (\r\n              <th key={col.name}>{col.label}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map((row) => (\r\n            <tr key={row[idCol]}>\r\n              {columns.map((col) => (\r\n                <td key={col.name} className={col.className}>\r\n                  {col.render ? col.render(row) : row[col.name]}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nconst MatIcon = ({ name, extra, text }) => (\r\n  <>\r\n    <span className={`mat-icon material-icons${extra ? \" \" + extra : \"\"}`}>\r\n      {name}\r\n    </span>\r\n    {text && <span>{text}</span>}\r\n  </>\r\n);\r\nexport default MatIcon;\r\n","import { gql } from \"apollo-boost\";\r\n\r\nexport const COMPLAINTS = gql`\r\n  query fetchComplaints {\r\n    complaints {\r\n      id\r\n      clientName\r\n      location {\r\n        id\r\n        name\r\n      }\r\n      openDate\r\n      status\r\n      details\r\n      rca\r\n      actionPlan\r\n      results\r\n      financialImpact\r\n      costCenter\r\n      responsiblePerson\r\n      dueDate\r\n      closeDate\r\n      assignedTo {\r\n        id\r\n        username\r\n      }\r\n      nature {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COMPLAINT = gql`\r\n  query getComplaint($id: ID!) {\r\n    complaint(id: $id) {\r\n      id\r\n      clientName\r\n      openDate\r\n      status\r\n      details\r\n      rca\r\n      actionPlan\r\n      results\r\n      financialImpact\r\n      costCenter\r\n      responsiblePerson\r\n      dueDate\r\n      closeDate\r\n      nature {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const NATURES = gql`\r\n  query getNatures {\r\n    natures {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\nexport const LOCATIONS = gql`\r\n  query getLocations {\r\n    locations {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REGISTER_COMPLAINT = gql`\r\n  mutation createComplaint(\r\n    $details: String!\r\n    $clientName: String!\r\n    $openDate: DateTime!\r\n    $nature: ID!\r\n    $location: ID!\r\n  ) {\r\n    createComplaint(\r\n      input: {\r\n        details: $details\r\n        clientName: $clientName\r\n        nature: $nature\r\n        location: $location\r\n        openDate: $openDate\r\n      }\r\n    ) {\r\n      result {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPDATE_ASSIGN_COMPLAINT = gql`\r\n  mutation assignTo($id: ID!, $userId: ID!) {\r\n    assignComplaint(id: $id, userId: $userId) {\r\n      complaint {\r\n        id\r\n        details\r\n        assignedTo {\r\n          id\r\n          username\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPDATE_DETAILS_COMPLAINT = gql`\r\n  mutation updateDetails(\r\n    $id: ID!\r\n    $rca: String!\r\n    $actionPlan: String!\r\n    $results: String!\r\n    $financialImpact: String!\r\n    $costCenter: String!\r\n    $responsiblePerson: String!\r\n  ) {\r\n    updateComplaint(\r\n      id: $id\r\n      rca: $rca\r\n      actionPlan: $actionPlan\r\n      results: $results\r\n      financialImpact: $financialImpact\r\n      costCenter: $costCenter\r\n      responsiblePerson: $responsiblePerson\r\n    ) {\r\n      complaint {\r\n        id\r\n        details\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\nfunction Input({ label, name, help, type = \"text\", ...props }) {\r\n  return (\r\n    <div className=\"input-wrap\">\r\n      <label htmlFor={name}>{label}</label>\r\n      {type === \"textarea\" ? (\r\n        <textarea name={name} id={name} {...props} />\r\n      ) : (\r\n        <input type={type} name={name} id={name} {...props} />\r\n      )}\r\n      {help && <span className=\"input-help\">{help}</span>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nfunction Select({ label, name, options = [], ...props }) {\r\n  return (\r\n    <div className=\"input-wrap\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <select name={name} id={name} {...props}>\r\n        <option value=\"\">---Select---</option>\r\n        {options.map((o) => (\r\n          <option key={o.id} value={o.id}>\r\n            {o.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Select;\r\n","import React, { useState } from \"react\";\r\nimport Input from \"../../components/forms/Input\";\r\nimport Select from \"../../components/forms/Select\";\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\nimport {\r\n  REGISTER_COMPLAINT,\r\n  COMPLAINTS,\r\n  NATURES,\r\n  LOCATIONS,\r\n} from \"../../helpers/GraphQL\";\r\nimport MatIcon from \"../../components/icons/MatIcon\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\n\r\nfunction NewComplaintRegisterPage({}) {\r\n  let natures = useQuery(NATURES);\r\n  let locations = useQuery(LOCATIONS);\r\n  const [redirect, setRedirect] = useState(null);\r\n  const [formData, setFormData] = useState(new Map());\r\n  const [registerComplaint, { loading }] = useMutation(REGISTER_COMPLAINT);\r\n  const natureOptions = natures.data ? natures.data.natures : [];\r\n  const locationOptions = locations.data ? locations.data.locations : [];\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    registerComplaint({\r\n      variables: {\r\n        ...formData,\r\n        openDate: `${formData.openDate}T00:00+03:00`,\r\n      },\r\n      refetchQueries: [{ query: COMPLAINTS }],\r\n    }).then(\r\n      () => setRedirect(\"/complaints\"),\r\n      (res) => console.log(\"Error: \", res)\r\n    );\r\n  }\r\n  function handleChange(e) {\r\n    const { value, name } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  }\r\n  return redirect ? (\r\n    <Redirect to={redirect} />\r\n  ) : (\r\n    <div>\r\n      <div className=\"toolbar\">\r\n        <div className=\"titlebar\">\r\n          <NavLink to=\"/complaints\" className=\"btn btn-light mr-1\">\r\n            <MatIcon name=\"keyboard_arrow_left\" />\r\n          </NavLink>\r\n          <h5>Register New Complaint</h5>\r\n        </div>\r\n      </div>\r\n      {loading && <p>Sending ....</p>}\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <div className=\"form-grid-2\">\r\n          <div>\r\n            <Input\r\n              name=\"clientName\"\r\n              label=\"Client Name\"\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n            <Select\r\n              name=\"location\"\r\n              label=\"Location\"\r\n              options={locationOptions}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n            <Select\r\n              name=\"nature\"\r\n              label=\"Nature\"\r\n              options={natureOptions}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n\r\n            <Input\r\n              name=\"openDate\"\r\n              label=\"Open Date\"\r\n              type=\"date\"\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <Input\r\n              name=\"details\"\r\n              label=\"Details\"\r\n              type=\"textarea\"\r\n              onChange={handleChange}\r\n              required\r\n              maxLength=\"300\"\r\n              help=\"Max 300 characters\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-footer\">\r\n          <button>Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewComplaintRegisterPage;\r\n","import React from \"react\";\r\nimport MatIcon from \"../icons/MatIcon\";\r\n\r\nfunction Modal({ onClose, title, children, posx, posy, ...props }) {\r\n  const showHideClassName = \"modal display-block\";\r\n  return (\r\n    <div className={showHideClassName} {...props}>\r\n      <div className=\"modal-main\">\r\n        <div className=\"modal-header\">\r\n          {title ? <h5 className=\"modal-title\">{title}</h5> : <span></span>}\r\n          <div className=\"btn-group\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-link text-warning\"\r\n              onClick={onClose}\r\n            >\r\n              <MatIcon name=\"close\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-content\">{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","import React, { useState } from \"react\";\r\nimport Select from \"../../components/forms/Select\";\r\nimport { UPDATE_ASSIGN_COMPLAINT, COMPLAINTS } from \"../../helpers/GraphQL\";\r\nimport { USERS } from \"../../helpers/UsersGraphQL\";\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\n\r\nfunction AssignComplaintPopup({ complaint, onComplete }) {\r\n  let users = useQuery(USERS);\r\n  const [formData, setFormData] = useState(new Map());\r\n  const [assignTo, { loading }] = useMutation(UPDATE_ASSIGN_COMPLAINT);\r\n  const userOptions = users.data\r\n    ? users.data.users.map((r) => {\r\n        return { ...r, name: r.username };\r\n      })\r\n    : [];\r\n  console.log(complaint);\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    assignTo({\r\n      variables: {\r\n        ...formData,\r\n        id: complaint.id,\r\n      },\r\n      refetchQueries: [{ query: COMPLAINTS }],\r\n    }).then(\r\n      () => onComplete(),\r\n      (res) => console.log(\"Error: \", res)\r\n    );\r\n  }\r\n  function handleChange(e) {\r\n    const { value, name } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  }\r\n  return (\r\n    <div>\r\n      <h5>Assign Complaint To User</h5>\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <div>\r\n          <Select\r\n            name=\"userId\"\r\n            label=\"Assign To\"\r\n            onChange={handleChange}\r\n            required\r\n            options={userOptions}\r\n          />\r\n        </div>\r\n        <div className=\"form-footer\">\r\n          <button>Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AssignComplaintPopup;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  COMPLAINTS,\r\n  UPDATE_DETAILS_COMPLAINT,\r\n  GET_COMPLAINT,\r\n} from \"../../helpers/GraphQL\";\r\nimport Input from \"../../components/forms/Input\";\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\nimport { Redirect, NavLink } from \"react-router-dom\";\r\nimport MatIcon from \"../../components/icons/MatIcon\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nfunction UpdateComplaintForm({ match }) {\r\n  const [redirect, setRedirect] = useState(null);\r\n  const [formData, setFormData] = useState(new Map());\r\n\r\n  const { loading, error, data } = useQuery(GET_COMPLAINT, {\r\n    variables: { id: match.params.id },\r\n  });\r\n  const [updateDetails] = useMutation(UPDATE_DETAILS_COMPLAINT);\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n  let complaint = data.complaint;\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    let prev = new Map();\r\n    Object.keys(complaint).forEach((key) => {\r\n      if (!formData[key]) {\r\n        prev[key] = complaint[key];\r\n      }\r\n    });\r\n\r\n    updateDetails({\r\n      variables: {\r\n        ...formData,\r\n        ...prev,\r\n        id: complaint.id,\r\n      },\r\n      refetchQueries: [{ query: COMPLAINTS }],\r\n    }).then(\r\n      () => setRedirect(\"/complaints\"),\r\n      (res) => console.log(\"Error: \", res)\r\n    );\r\n  }\r\n  function handleChange(e) {\r\n    const { value, name } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  }\r\n  const inputsConf = {\r\n    type: \"textarea\",\r\n    onChange: handleChange,\r\n    required: \"required\",\r\n    maxLength: \"200\",\r\n    help: \"Max 200 characters\",\r\n  };\r\n  return redirect ? (\r\n    <Redirect to={redirect} />\r\n  ) : (\r\n    <div className=\"form-wrap\">\r\n      <div className=\"toolbar\">\r\n        <div className=\"titlebar\">\r\n          <NavLink to=\"/complaints\" className=\"btn btn-light mr-1\">\r\n            <MatIcon name=\"keyboard_arrow_left\" />\r\n          </NavLink>\r\n          <h5>Fill complain analysis/resolution</h5>\r\n        </div>\r\n      </div>\r\n\r\n      <form className=\"form form-flex v-scroll\" onSubmit={handleSubmit}>\r\n        <div className=\"form-fields\">\r\n          <p>\r\n            <b>Details:</b> {complaint.details}\r\n          </p>\r\n          <Input\r\n            name=\"actionPlan\"\r\n            label=\"Action Plan\"\r\n            {...inputsConf}\r\n            defaultValue={complaint.actionPlan}\r\n          />\r\n          <Input\r\n            name=\"rca\"\r\n            label=\"Root Cause Analysis\"\r\n            {...inputsConf}\r\n            defaultValue={complaint.rca}\r\n          />\r\n          <Input\r\n            name=\"results\"\r\n            label=\"Results\"\r\n            {...inputsConf}\r\n            defaultValue={complaint.results}\r\n            maxLength=\"500\"\r\n            help=\"Max 500 characters\"\r\n            rows=\"4\"\r\n          />\r\n          <Input\r\n            name=\"financialImpact\"\r\n            label=\"Financial Impact\"\r\n            {...inputsConf}\r\n            defaultValue={complaint.financialImpact}\r\n          />\r\n          <Input\r\n            name=\"costCenter\"\r\n            label=\"Cost Center\"\r\n            {...inputsConf}\r\n            defaultValue={complaint.costCenter}\r\n          />\r\n          <Input\r\n            name=\"responsiblePerson\"\r\n            label=\"Responsible Person\"\r\n            {...inputsConf}\r\n            defaultValue={complaint.responsiblePerson}\r\n          />\r\n        </div>\r\n        <div className=\"form-footer\">\r\n          <button>Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(UpdateComplaintForm);\r\n","import React, { useState } from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { Route, NavLink } from \"react-router-dom\";\r\n\r\nimport Table from \"../components/tables/Table\";\r\nimport MatIcon from \"../components/icons/MatIcon\";\r\nimport { COMPLAINTS } from \"../helpers/GraphQL\";\r\nimport NewComplaintRegisterPage from \"./complaints/NewComplaintRegisterPage\";\r\nimport Modal from \"../components/modals/Modal\";\r\nimport AssignComplaintPopup from \"./complaints/AssignComplaintPopup\";\r\nimport UpdateComplaintForm from \"./complaints/UpdateComplaintForm\";\r\nimport useProfile from \"../components/hooks/useProfile\";\r\n\r\nfunction ComplaintsPage() {\r\n  useProfile();\r\n  const { loading, error, data } = useQuery(COMPLAINTS);\r\n  const [assign, setAssign] = useState(false);\r\n  const [selected, setSelected] = useState(null);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n\r\n  const columns = [\r\n    { name: \"id\", label: \"ID\" },\r\n    { name: \"clientName\", label: \"Client Name\" },\r\n    { name: \"location_name\", label: \"Location\" },\r\n    { name: \"openDate\", label: \"Open Date\" },\r\n    { name: \"nature_name\", label: \"Nature of Complaint\" },\r\n    { name: \"status\", label: \"Status\" },\r\n    {\r\n      name: \"assigned_to\",\r\n      label: \"Assigned To\",\r\n      render: (row) =>\r\n        row.assignedTo ? (\r\n          <span>{row.assignedTo.username}</span>\r\n        ) : (\r\n          <button\r\n            onClick={() => {\r\n              setAssign(true);\r\n              setSelected(row);\r\n            }}\r\n          >\r\n            Assign\r\n          </button>\r\n        ),\r\n    },\r\n    { name: \"details\", label: \"Details\", className: \"col-ellipsis\" },\r\n    {\r\n      name: \"viewDetails\",\r\n      label: \"\",\r\n      render: (row) =>\r\n        row.assignedTo ? (\r\n          <NavLink\r\n            className=\"btn-primary d-flex\"\r\n            to={`/complaints/details/${row.id}`}\r\n          >\r\n            {row.status === \"COMPLETED\" ? \"View Details\" : \"Complete\"}\r\n            <MatIcon name=\"chevron_right\" />\r\n          </NavLink>\r\n        ) : null,\r\n    },\r\n  ];\r\n  const fmtDate = (strDate) => {\r\n    let parsed = Date.parse(strDate);\r\n    return new Date(parsed).toLocaleDateString(\"en-GB\");\r\n  };\r\n  const records = data.complaints.map((r) => ({\r\n    ...r,\r\n    nature_name: r.nature.name,\r\n    location_name: r.location ? r.location.name : \"\",\r\n    openDate: fmtDate(r.openDate),\r\n  }));\r\n  return (\r\n    <>\r\n      <Route path=\"/complaints\" exact>\r\n        <div className=\"toolbar\">\r\n          <h5>List of complaints</h5>\r\n          <NavLink\r\n            className=\"d-flex btn has-left-icon\"\r\n            to=\"/complaints/new-complaint\"\r\n          >\r\n            <MatIcon name=\"add\" text=\"New Complaint\" />\r\n          </NavLink>\r\n        </div>\r\n        <Table columns={columns} data={records} />\r\n      </Route>\r\n      <Route path=\"/complaints/new-complaint\" exact>\r\n        <NewComplaintRegisterPage />\r\n      </Route>\r\n      <Route path=\"/complaints/details/:id\" exact>\r\n        <UpdateComplaintForm />\r\n      </Route>\r\n      {assign && (\r\n        <Modal title={selected.clientName} onClose={() => setAssign(false)}>\r\n          <AssignComplaintPopup\r\n            complaint={selected}\r\n            onComplete={() => setAssign(false)}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ComplaintsPage;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport MatIcon from \"../../components/icons/MatIcon\";\r\n\r\nfunction NewUserPage(props) {\r\n  return (\r\n    <div>\r\n      <div className=\"toolbar\">\r\n        <div className=\"titlebar\">\r\n          <NavLink to=\"/users\" className=\"btn btn-light mr-1\">\r\n            <MatIcon name=\"keyboard_arrow_left\" />\r\n          </NavLink>\r\n          <h5>Register New User</h5>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewUserPage;\r\n","import React from \"react\";\r\nimport { USERS } from \"../helpers/UsersGraphQL\";\r\nimport NewUserPage from \"./users/NewUserPage\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { Route, NavLink, useHistory } from \"react-router-dom\";\r\nimport MatIcon from \"../components/icons/MatIcon\";\r\nimport Table from \"../components/tables/Table\";\r\nimport useProfile from \"../components/hooks/useProfile\";\r\n\r\nfunction UserManagementPage(props) {\r\n  useProfile();\r\n  const { loading, error, data } = useQuery(USERS);\r\n  if (loading) return null;\r\n  if (error) {\r\n    return <p>Error (:</p>;\r\n  }\r\n  const columns = [\r\n    { name: \"id\", label: \"ID\" },\r\n    { name: \"username\", label: \"Client Name\" },\r\n    { name: \"email\", label: \"Open Date\" },\r\n    { name: \"name\", label: \"Full Name\" },\r\n  ];\r\n\r\n  const records = data.users.map((r) => ({\r\n    ...r,\r\n    name: r.firstName ? `${r.firstName} ${r.lastName}` : null,\r\n  }));\r\n  return (\r\n    <>\r\n      <Route path=\"/users\" exact>\r\n        <div className=\"toolbar\">\r\n          <h5>List of users</h5>\r\n          <NavLink\r\n            className=\"d-flex btn btn-light has-left-icon\"\r\n            to=\"/users/new-user\"\r\n          >\r\n            <MatIcon name=\"add\" text=\"New User\" />\r\n          </NavLink>\r\n        </div>\r\n        <Table columns={columns} data={records} />\r\n      </Route>\r\n      <Route path=\"/users/new-user\" exact>\r\n        <NewUserPage />\r\n      </Route>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserManagementPage;\r\n","import { BASE_URL, CLIENT_ID, CLIENT_SECRET } from \"../conf\";\r\nconst ACCESS_TOKEN = \"AccessToken\";\r\n\r\nconst AuthHelper = {\r\n  saveToken: (token, cb) => {\r\n    sessionStorage.setItem(ACCESS_TOKEN, token);\r\n    cb(true);\r\n  },\r\n  getToken: () => sessionStorage.getItem(ACCESS_TOKEN),\r\n  removeToken: () => sessionStorage.removeItem(ACCESS_TOKEN),\r\n};\r\n\r\nexport default AuthHelper;\r\n","import React, { useState } from \"react\";\r\nimport Input from \"../components/forms/Input\";\r\nimport MatIcon from \"../components/icons/MatIcon\";\r\nimport AuthHelper from \"../helpers/AuthHelper\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { USERS_GET_TOKEN, USERS_GET_ME } from \"../helpers/UsersGraphQL\";\r\nimport { COMPLAINTS } from \"../helpers/GraphQL\";\r\n\r\nfunction LoginPage(props) {\r\n  const [formData, setFormData] = useState(new Map());\r\n  const [redirect, setRedirect] = useState(null);\r\n  const [login, { loading, client }] = useMutation(USERS_GET_TOKEN);\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    client.clearStore();\r\n    login({\r\n      variables: {\r\n        ...formData,\r\n      },\r\n    }).then(\r\n      (res) => {\r\n        if (res.data) {\r\n          let { token } = res.data.tokenAuth;\r\n          AuthHelper.saveToken(token, () => {\r\n            setRedirect(\"/\");\r\n          });\r\n        }\r\n      },\r\n      (res) => console.log(\"Error: \", res)\r\n    );\r\n  }\r\n  function handleChange(e) {\r\n    const { value, name } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  }\r\n  return redirect ? (\r\n    <Redirect to={redirect} />\r\n  ) : (\r\n    <>\r\n      <span></span>\r\n      <div className=\"login-page\">\r\n        <div className=\"login-header d-flex mb-1 p-1\">\r\n          <h3>Twiga - CCMS</h3>\r\n          <img\r\n            src={\r\n              process.env.PUBLIC_URL + \"/static/images/complaints_register.png\"\r\n            }\r\n            alt=\"Image\"\r\n          />\r\n        </div>\r\n        <form className=\"form\" onSubmit={handleSubmit}>\r\n          <div className=\"mt-1\">\r\n            <Input\r\n              name=\"username\"\r\n              label=\"Username\"\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n            <Input\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-footer\">\r\n            <button>\r\n              <span className=\"mr-1\">Login</span>\r\n              <MatIcon name=\"login\" />\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\nimport NavBar from \"./components/nav/NavBar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ComplaintsPage from \"./pages/ComplaintsPage\";\nimport UserManagementPage from \"./pages/UserManagementPage\";\nimport LoginPage from \"./pages/LoginPage\";\nimport AuthHelper from \"./helpers/AuthHelper\";\nimport { BASE_URL } from \"./conf\";\nconst getToken = () => {\n  const token = AuthHelper.getToken();\n  return token ? `JWT ${token}` : \"\";\n};\nconst requestMiddleware = (operation) => {\n  operation.setContext({\n    headers: {\n      Authorization: getToken(),\n    },\n  });\n};\nconst client = new ApolloClient({\n  uri: `${BASE_URL}/graphql`,\n  request: requestMiddleware,\n});\n\nfunction App() {\n  return (\n    <Router>\n      <ApolloProvider client={client}>\n        <Switch>\n          <Route path=\"/login\" exact>\n            <LoginPage />\n          </Route>\n          <Route path=\"/\">\n            <NavBar />\n            <section className=\"page-content container\">\n              <div className=\"content\">\n                <Switch>\n                  <Route path=\"/\" exact>\n                    <HomePage />\n                  </Route>\n                  <Route path=\"/complaints\">\n                    <ComplaintsPage />\n                  </Route>\n                  <Route path=\"/users\">\n                    <UserManagementPage />\n                  </Route>\n                </Switch>\n              </div>\n            </section>\n          </Route>\n        </Switch>\n      </ApolloProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","// Configurations:\r\n// 1. Backend endpoint depending on test vs live\r\n// 2.\r\n\r\nconst ENVIRON = process.env.NODE_ENV === \"development\" ? \"DEV\" : \"PROD\";\r\n\r\nconst CONF = {\r\n  DEV: {\r\n    baseUrl: \"http://localhost:8000/api\",\r\n  },\r\n  PROD: {\r\n    baseUrl: \"/api\",\r\n  },\r\n};\r\n\r\nexport const BASE_URL = CONF[ENVIRON].baseUrl;\r\nexport const GOOGLE_API_KEY = \"AIzaSyDQ7WXCqy5-cyHTyho_XLgBDHJZe4n-nAw\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}